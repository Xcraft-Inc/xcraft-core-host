#!/usr/bin/env node
'use strict';

const moduleName = 'xcraft-core-host';

const watt = require('gigawatts');
const xLog = require('xcraft-core-log')(moduleName);

class Host {
  constructor() {
    const config = require('../lib/index.js');

    if (config.appEnv === 'release' && !process.env.NODE_ENV) {
      process.env.NODE_ENV = 'production';
    }

    if (!process.env.XCRAFT_LOG && process.env.NODE_ENV === 'production') {
      process.env.XCRAFT_LOG = '2';
    }

    this._isElectron = !!process.versions.electron;
    this._app = null;
    this._appConfigPath = config.appConfigPath;

    this._xServer = require('xcraft-server')(
      config.appConfigPath,
      config.projectPath
    );

    process.on('uncaughtException', ex => {
      xLog.err(
        `Please, ensure to yield properly all async calls: ${ex.stack ||
          ex.message ||
          ex}`
      );
    });

    if (this._isElectron) {
      xLog.info(`electron runtime detected,`);
      this._app = require('electron').app;
      this._app.on('window-all-closed', () => null);
      // Specific for macOS
      this._app.on('open-file', (ev, filePath) => {
        if (this._busClient && this._busClient.isConnected()) {
          this._notifyOpenFile(filePath);
        } else {
          this.filePath = filePath;
        }
        ev.preventDefault();
      });
    } else {
      xLog.info(`node runtime detected`);
    }

    xLog.info(`config; ${JSON.stringify(config, null, 2)}`);

    this._xConfig = require('xcraft-core-etc')().load(moduleName);

    watt.wrapAll(this);
  }

  _terminate() {
    if (this._busClient) {
      this._busClient.command.send('shutdown');
    }
  }

  _notifyOpenFile(filePath) {
    if (!this._xConfig.openFileQuest) {
      return;
    }
    this._busClient.command.send(
      this._xConfig.openFileQuest,
      {filePaths: [filePath]},
      null,
      err => {
        console.error(err);
      }
    );
  }

  *_startAndRunMainQuest(next) {
    /* HACK: force and unusual orc name.
     * The problem is that the greathall::* topic is already registered, then
     * when this BusClient is used to send commands, an other orc name must
     * be used in order to handle properly all subscribes of events.
     */
    const xBus = require('xcraft-core-bus');
    this._busClient._orcName = xBus.generateOrcName();

    const _next = next.parallel();
    const unsub = this._busClient.events.subscribe(`greathall::loaded`, () => {
      unsub();
      _next();
    });

    const isLoaded = yield this._busClient.connect('ee', null, next);
    if (isLoaded) {
      unsub();
      _next();
    }

    yield next.sync();

    yield this._busClient.command.send('goblin.init', null, null, next);

    /* Start the main quest (app bootstrap). */
    yield this._busClient.command.send(
      this._xConfig.mainQuest,
      null,
      null,
      next
    );
  }

  *boot(next) {
    if (this._app) {
      this._app.once('ready', next.parallel().arg(0));
    }

    yield this._xServer.start(next);

    if (this._xConfig.mainQuest) {
      const {BusClient} = require('xcraft-core-busclient');
      this._busClient = new BusClient();

      this._startAndRunMainQuest(next.parallel());
      yield next.sync();

      if (this.filePath) {
        this._notifyOpenFile(this.filePath);
        this.filePath = null;
      }

      if (this._xConfig.secondaryQuest) {
        /* Start the secondary quest (electron ready) */
        yield this._busClient.command.send(
          this._xConfig.secondaryQuest,
          null,
          null,
          next
        );
        // FIXME: not 100% accurate...
        this._terminate();
      }
    }
  }
}

const host = new Host();
host.boot().catch(err => {
  xLog.err(err);
});
